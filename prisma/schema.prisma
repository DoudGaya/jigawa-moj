generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  USER
  ADMIN
  COURT
  STAFF
  POLICE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum CaseStatus {
  Pending
  Active
  Closed
  Submitted
  Reviewed
  Draft
}

enum CaseType {
  Criminal
  Civil
  Family
  Other
}

enum Tribunal {
  SHARIA
  CIVIL
  ELECTION
  INDUSTRIAL
  TAX
  ADMINISTRATIVE
  OTHER
}

enum FilingType {
  CASE
  PROBATE
}

enum FilingStatus {
  Submitted
  UnderReview
  Accepted
  Rejected
}

model User {
  id                       String                    @id @default(uuid())
  firstName                String?
  lastName                 String?
  otherNames               String?
  email                    String?                   @unique
  password                 String?
  phone                    String?
  state                    String?
  gender                   Gender?
  localGovernment          String?
  emailVerified            DateTime?
  image                    String?
  role                     UserRole                  @default(USER)
  isTwoFactorEnabled       Boolean                   @default(false)
  accounts                 Account[]
  court                    Court?
  customer                 Customer?
  filings                  Filing[]
  staff                    Staff?
  police                   PoliceStation?
  TwoFactorConfirmation    TwoFactorConfirmation?
}

model PoliceStation {
  id                       String                    @id @default(uuid())
  stationName              String?
  stationAddress           String?
  cases                     Case[]
  stationLocalGovernment   String?
  stationcontactNumber     String?
  stationState             String?
  contactEmail             String?
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                    @unique
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Account {
  id                       String                    @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String                    @map("provider_account_id")
  refresh_token            String?                   @db.Text
  access_token             String?                   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?                   @db.Text
  session_state            String?
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                       String                    @id @default(uuid())
  email                    String
  token                    String                    @unique
  expires                  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                       String                    @id @default(uuid())
  email                    String
  token                    String                    @unique
  expires                  DateTime

  @@unique([email, token])
}

model twoFactorToken {
  id                       String                    @id @default(uuid())
  email                    String
  token                    String                    @unique
  expires                  DateTime

  @@unique([email, token])
}

model Probate {
  id                       String                    @id @default(uuid())
  assets                   Asset[]
  beneficiaries            String
  filing                   Filing?
  customer                 Customer                  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId               String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Asset {
  id                       String                    @id @default(uuid())
  name                     String?
  value                    String?
  probate                  Probate                   @relation(fields: [probateId], references: [id], onDelete: Cascade)
  probateId                String                    @unique
}

model TwoFactorConfirmation {
  id                       String                    @id @default(uuid())
  userId                   String                    @unique
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PoliceCaseReport {
  id                       String                    @id @default(uuid())
  defendantName            String
  caseTitle                String
  caseDescription          String?
  defendantAddress         String
  defendantAge             String
  defendantSex             String
  defendantOccupation      String
  placeOfOffense           String
  nameOfIPO                String
  firstInformationReport   String?
  statementOfComplainant   String?
  statementOfVictims       String?
  statementOfWitness       String?
  medicalReport            String?
  pictures                 Json?
  isDraft                  Boolean                   @default(false)
  createdAt                DateTime                  @default(now())
}

model Counter {
  id                       String                    @id @default(uuid())
  name                     String                    @unique
  value                    Int
}

model Case {
  id                       String                    @id @default(uuid())
  title                    String?
  caseDescription          String?
  placeOfOffense           String?
  nameOfIPO                String?
  dateOfFiling             DateTime?                 @default(now())
  yearOfFIR                String?
  underActs                String?
  underSections            String?
  defendantAddress         String?
  defendantAge             String?
  defendantSex             String?
  defendantOccupation      String?
  polcieStation            PoliceStation?      @relation(fields: [policeId], references: [id])
  policeId                 String?
  defendantName            String?
  caseCouncil              Council[]
  FIR                      String?
  statementOfComplainant   String?
  statementOfVictims       String?
  statementOfWitness       String?
  medicalReport            String?
  pictures                 Json?
  caseNumber               String
  courtRoom                String?
  courtDate                DateTime?
  caseType                 CaseType?
  caseStatus               CaseStatus
  judgeName                String?
  judgeEmail               String?
  judgePhone               String?
  tribunal                 String?
  courtId                  String?
  hearings                 Hearing[]
  court                    Court?                    @relation(fields: [courtId], references: [id])
  files                    Files[]
  filing                   Filing?
  transaction              Transaction[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Council {
  id                       String                    @id @default(uuid())
  caseId                   String
  name                     String?
  email                    String?
  phone                    String?
  role                     String?
  address                  String?
  case                     Case                      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Hearing {
  id                       String                    @id @default(uuid())
  case                     Case                      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId                   String
  time                     String?
  date                     String?
}

model Files {
  id                       String                    @id @default(uuid())
  fileTitle                String?
  fileDescription          String?
  fileUrl                  String
  case                     Case                      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId                   String                    @unique
}

model Customer {
  id                       String                    @id @default(uuid())
  city                     String?
  address                  String?
  occupation               String?
  employmentStatus         String?
  maritalStatus            String?
  probates                 Probate[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                    @unique
  transactions             Transaction[]
}

model Transaction {
  id                       String                    @id @default(uuid())
  amount                   String
  paymentRef               String
  paymentFor               String
  paymentStatus            PaymentStatus
  case                     Case                      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId                   String                    @unique
  customer                 Customer                  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId               String
  paymentDate              DateTime                  @default(now())
}

model Court {
  id                       String                    @id @default(uuid())
  courtName                String
  tribunal                 Tribunal
  city                     String?
  courtLocalGovernment     String?
  jurisdiction             String?
  courtAddress             String?
  level                    String?
  user                     User                      @relation(fields: [userId], references: [id])
  userId                   String                    @unique
  cases                    Case[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Staff {
  id                       String                    @id @default(uuid())
  staffNumber              String?
  staffRole                String?
  salaryStructure          String?
  jobTitle                 String?
  isJudge                  Boolean?
  department               String?
  employerName             String?
  employmentLocation       String?
  position                 String?
  salaryGrade              String?
  step                     String?
  dateOfEmployment         DateTime?
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String                    @unique
  courtId                  String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Inmate {
  id                       String                    @id @default(uuid())
  firstName                String
  lastName                 String
  age                      String
  maritalStatus            String
  dateOfIncarceration      DateTime
  relativePhone            String
  relativeFullName         String
  phoneNumber              String
  relativeaddress          String
  expectedReleaseDate      DateTime
  caseId                   String                    @unique
}

model Filing {
  id                       String                    @id @default(uuid())
  case                     Case?                     @relation(fields: [caseId], references: [id])
  caseId                   String                    @unique
  probate                  Probate?                  @relation(fields: [probateId], references: [id])
  probateId                String                    @unique
  filingType               FilingType
  user                     User                      @relation(fields: [userId], references: [id])
  userId                   String                    @unique
  filedAt                  DateTime                  @default(now())
  status                   FilingStatus
}